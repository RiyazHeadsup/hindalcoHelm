---
apiVersion: v1
kind: Namespace
metadata:
  name: haproxy-ingress-system
  labels:
    app.kubernetes.io/name: haproxy-ingress-controller

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-ingress-configmap
  namespace: haproxy-ingress-system
  labels:
    app.kubernetes.io/name: haproxy-ingress-controller
data:
  timeout-connect: "5s"
  timeout-client: "50s"
  timeout-server: "50s"
  timeout-tunnel: "1h"
  timeout-http-request: "5s"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-tcp-services-configmap
  namespace: haproxy-ingress-system
  labels:
    app.kubernetes.io/name: haproxy-ingress-controller
data:
  "1883": "default/broker-mosquitto:1883"

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: haproxy-ingress-clusterrole
  labels:
    app.kubernetes.io/name: haproxy-ingress-controller
rules:
  - apiGroups: [""]
    resources: ["configmaps", "endpoints", "nodes", "pods", "secrets", "services"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions", "networking.k8s.io"]
    resources: ["ingresses", "ingressclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: haproxy-ingress-clusterrolebinding
  labels:
    app.kubernetes.io/name: haproxy-ingress-controller
subjects:
  - kind: ServiceAccount
    name: haproxy-ingress-controller-sa
    namespace: haproxy-ingress-system
roleRef:
  kind: ClusterRole
  name: haproxy-ingress-clusterrole
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: haproxy-ingress-controller-sa
  namespace: haproxy-ingress-system
  labels:
    app.kubernetes.io/name: haproxy-ingress-controller

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: haproxy-ingress-controller-daemonset
  namespace: haproxy-ingress-system
  labels:
    app.kubernetes.io/name: haproxy-ingress-controller
    app.kubernetes.io/part-of: haproxy-ingress-controller
    app.kubernetes.io/version: "1.10"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: haproxy-ingress-controller
      app.kubernetes.io/part-of: haproxy-ingress-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: haproxy-ingress-controller
        app.kubernetes.io/part-of: haproxy-ingress-controller
        app.kubernetes.io/version: "1.10"
    spec:
      serviceAccountName: haproxy-ingress-controller-sa
      terminationGracePeriodSeconds: 60
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      nodeSelector:
        node-role.kubernetes.io/worker: "worker"
      tolerations:
        - key: node-role.kubernetes.io/master
          operator: Equal
          effect: NoSchedule
      containers:
        - name: haproxy-ingress-controller
          image: haproxytech/kubernetes-ingress:1.10
          args:
            - --configmap=$(POD_NAMESPACE)/haproxy-ingress-configmap
            - --tcp-services-configmap=$(POD_NAMESPACE)/haproxy-tcp-services-configmap
            - --default-backend-service=$(POD_NAMESPACE)/haproxy-ingress-default-backend-svc
            - --ingress.class=haproxy
            - --publish-service=$(POD_NAMESPACE)/haproxy-ingress-controller-svc
            - --sort-backends=true
            - --log=info
            - --controller-class=haproxy.org/ingress-controller
            - --healthz-port=1042
            - --runtime-api=/var/run/haproxy-runtime-api.sock
            - --default-ssl-certificate=default/adityabirla-ssl-secret
          securityContext:
            runAsUser: 0
            runAsGroup: 0
            allowPrivilegeEscalation: true
            capabilities:
              drop: ["ALL"]
              add: ["NET_BIND_SERVICE"]
          env:
            - name: TZ
              value: "Etc/UTC"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: DISABLE_HAPROXY_RUNTIME_API
              value: "false"
          ports:
            - name: http
              containerPort: 80
              hostPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              hostPort: 443
              protocol: TCP
            - name: mqtt
              containerPort: 1883
              hostPort: 1883
              protocol: TCP
            - name: stat
              containerPort: 1024
              protocol: TCP
            - name: healthz
              containerPort: 1042
              protocol: TCP
          volumeMounts:
            - name: haproxy-config-volume
              mountPath: /etc/haproxy
            - name: haproxy-runtime-volume
              mountPath: /var/run
            - name: haproxy-tmp-volume
              mountPath: /tmp
          resources:
            requests:
              cpu: 500m
              memory: 512Mi
            limits:
              cpu: 2000m
              memory: 2Gi
      volumes:
        - name: haproxy-config-volume
          emptyDir: {}
        - name: haproxy-runtime-volume
          emptyDir: {}
        - name: haproxy-tmp-volume
          emptyDir: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: haproxy-ingress-default-backend
  namespace: haproxy-ingress-system
  labels:
    app.kubernetes.io/name: haproxy-ingress-default-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: haproxy-ingress-default-backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: haproxy-ingress-default-backend
    spec:
      containers:
        - name: default-backend
          image: registry.k8s.io/defaultbackend-amd64:1.5
          ports:
            - containerPort: 8080
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 5
            timeoutSeconds: 3

---
apiVersion: v1
kind: Service
metadata:
  name: haproxy-ingress-default-backend-svc
  namespace: haproxy-ingress-system
spec:
  ports:
    - name: http
      port: 80
      targetPort: 8080
  selector:
    app.kubernetes.io/name: haproxy-ingress-default-backend

---
apiVersion: v1
kind: Service
metadata:
  name: haproxy-ingress-controller-svc
  namespace: haproxy-ingress-system
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: http
    - name: https
      port: 443
      targetPort: https
  selector:
    app.kubernetes.io/name: haproxy-ingress-controller

---
apiVersion: v1
kind: Service
metadata:
  name: haproxy-stats-svc
  namespace: haproxy-ingress-system
spec:
  type: ClusterIP
  ports:
    - name: stat
      port: 1024
      targetPort: stat
  selector:
    app.kubernetes.io/name: haproxy-ingress-controller
